# -*- coding: utf-8 -*-
"""HEART DISEASE PREDICTOR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WQhjL6KBAqiniB0fBcN0lDX-6a-1_w4x

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and processing"""

1 #loading the csv data to a pandas dataframe
heart_data=pd.read_csv('/content/heart_disease_data.csv')

#number of rows and columns in table
heart_data.shape

#checking for missing values
heart_data.isnull().sum()

#statistical measures about the data
heart_data.describe()

#checking the distribution of target variable
heart_data['target'].value_counts()

"""1->defective heart
0->healthy heart

Splitting the features and target
"""

X = heart_data.drop(columns='target',axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""splitting the data into training data and test data"""

X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model training

Logistic regression
"""

model=LogisticRegression()

#training the logistic regression model with training model
model.fit(X_train, Y_train)

"""model evaluation

accuracy score
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data :', training_data_accuracy)

#accuracy on test data
X_test_prediction= model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data :', test_data_accuracy)

"""building a predictive system"""

input_data= (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

#change the input data to a numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the numpy array as we are predicting for only on instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

prediction=model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]== 0):
 print('the prerson does not have a heart disease')
else:
  print('the person has heart disease');

